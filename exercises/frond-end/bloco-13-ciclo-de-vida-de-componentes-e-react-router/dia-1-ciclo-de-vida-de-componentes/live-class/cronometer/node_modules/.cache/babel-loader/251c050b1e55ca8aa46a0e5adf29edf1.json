{"ast":null,"code":"var _jsxFileName = \"/home/feu/Trybe/trybe-exercises/exercises/frond-end/bloco-13-ciclo-de-vida-de-componentes-e-react-router/dia-1-ciclo-de-vida-de-componentes/live-class/cronometer/src/components/Cronometer.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Cronometer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 0\n    };\n  }\n\n  componentDidMount() {\n    const ONE_SECOND = 1000;\n    setInterval(() => {\n      this.setState(prevState => ({\n        seconds: prevState.seconds + 1\n      }));\n    }, ONE_SECOND);\n  }\n\n  render() {\n    const {\n      seconds\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Cronometer;","map":{"version":3,"sources":["/home/feu/Trybe/trybe-exercises/exercises/frond-end/bloco-13-ciclo-de-vida-de-componentes-e-react-router/dia-1-ciclo-de-vida-de-componentes/live-class/cronometer/src/components/Cronometer.js"],"names":["React","Component","Cronometer","constructor","props","state","seconds","componentDidMount","ONE_SECOND","setInterval","setState","prevState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAIA,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AACjCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,UAAU,GAAG,IAAnB;AACAC,IAAAA,WAAW,CAAC,MAAM;AAChB,WAAKC,QAAL,CAAeC,SAAD,KAAgB;AAAEL,QAAAA,OAAO,EAAEK,SAAS,CAACL,OAAV,GAAoB;AAA/B,OAAhB,CAAd;AACD,KAFU,EAERE,UAFQ,CAAX;AAGD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEN,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AAIA,wBACE;AAAA,gBACGC;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAvBgC;;AA0BnC,eAAeJ,UAAf","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass Cronometer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  componentDidMount() {\n    const ONE_SECOND = 1000;\n    setInterval(() => {\n      this.setState((prevState) => ({ seconds: prevState.seconds + 1}))\n    }, ONE_SECOND);\n  }\n\n  render() {\n    const { seconds } = this.state;\n\n    \n\n    return (\n      <h2>\n        {seconds}\n      </h2>\n    );\n  }\n}\n\nexport default Cronometer;"]},"metadata":{},"sourceType":"module"}